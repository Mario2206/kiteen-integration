{"version":3,"sources":["assets/img sync /^/.*$","assets/img/img1.png","assets/img/img2.png","assets/img/img3.png","components/explore-button/explore-button.tsx","components/dynamic-view/dynamic-view.tsx","components/anim-logo/anim-logo.tsx","hooks/use-anim/use-anim.ts","components/circle-button/circle-button.tsx","components/evolution-bar/evolution-bar.tsx","components/burger-button/burger-button.tsx","components/nav-button/nav-button.tsx","components/nav-bar/nav-bar.tsx","App.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ExploreButton","className","DynamicView","title","description","img","color","visible","sectionRef","useRef","CSSTransition","in","classNames","timeout","unmountOnExit","nodeRef","ref","style","backgroundColor","src","alt","AnimLogo","React","memo","value","animateRefEnter","animateRefEnd","buttonRef","textRef","anim","useState","animation","animState","setAnimState","updateAnim","newAnim","useAnim","setAnim","active","setActiveState","onHoverEnter","useCallback","currentEnter","current","currentOut","beginElement","state","onMouseEnter","width","height","viewBox","data-name","d","transform","fill","dur","attributeName","values","begin","animDuration","CircleButton","children","onClick","setHeight","adjustHeight","button","buttonWidth","getBoundingClientRect","useEffect","window","addEventListener","removeEventListener","data-testid","EvolutionBar","evolution","back","next","transformStyle","setTransformStyle","useMemo","innerWidth","BurgerButton","onCLick","NavButton","NavBar","buttonValues","setValues","buttonRefArray","toggleNav","length","TransitionGroup","item","index","key","toUpperCase","App","currentIndexView","setCurrentIndexView","maxPages","pages","page","require","imgName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72940773.chunk.js","sourcesContent":["var map = {\n\t\"./img1.png\": 29,\n\t\"./img2.png\": 30,\n\t\"./img3.png\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 28;","module.exports = __webpack_public_path__ + \"static/media/img1.f1aec09f.png\";","module.exports = __webpack_public_path__ + \"static/media/img2.856a70d4.png\";","module.exports = __webpack_public_path__ + \"static/media/img3.9348123f.png\";","import React from 'react';\r\nimport './explore-button.css'\r\n\r\nexport default function ExploreButton ({className} : {className? : string}) {\r\n\r\n    return (\r\n        <button className={`explore-button  ${className ?? \"\"}`}>\r\n            <span className={`explore-button--text`}>EXPLORE</span>\r\n        </button>\r\n    )\r\n}","import React, { useRef } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ExploreButton from '../explore-button/explore-button';\r\n\r\nimport \"./dynamic-view.css\"\r\n\r\ninterface IEDynamicView {\r\n    title : string, \r\n    description : string, \r\n    img : string, \r\n    color : string,\r\n    visible : boolean,\r\n    className? : string\r\n}\r\n\r\nexport default function DynamicView ({className, title, description, img, color, visible} : IEDynamicView) {\r\n\r\n    const sectionRef = useRef<HTMLElement>(null)\r\n\r\n    return (\r\n        <CSSTransition in={visible} classNames=\"dynamic-view\" timeout={3000} unmountOnExit nodeRef={sectionRef}>\r\n            <section className={`dynamic-view ${className ?? \"\"}`} ref={sectionRef}>  \r\n                <div className=\"dynamic-view--background\"  style={{backgroundColor : color}}></div>         \r\n                <div className=\"dynamic-view--container-text\">\r\n                    <h1 className=\"dynamic-view--main-title\">{title}</h1>\r\n                    <p className=\"dynamic-view--description\">\r\n                        {description}\r\n                    </p>\r\n                </div>  \r\n                <ExploreButton className=\"dynamic-view--explore-button\" /> \r\n                <img src={img} alt=\"miniature\" className=\"dynamic-view--miniature\"/> \r\n                <div className=\"dynamic-view--right-bar\" style={{backgroundColor : color}}></div>                         \r\n            </section>       \r\n        </CSSTransition>\r\n      \r\n    )\r\n}","import React, { useCallback, useRef, useState } from 'react';\r\nimport { useAnim } from '../../hooks/use-anim/use-anim';\r\nimport {CSSTransition} from \"react-transition-group\"\r\nimport \"./anim-logo.css\"\r\n\r\nfunction AnimLogoComponent ({value, className} : {value : string, className? : string}) {\r\n\r\n    const animateRefEnter = useRef<any>(null)\r\n    const animateRefEnd = useRef<any>(null)\r\n    const buttonRef = useRef<HTMLDivElement>(null)\r\n    const textRef = useRef<HTMLElement>(null)\r\n    const animDuration = 1\r\n\r\n    const [anim, setAnim] = useAnim(\"\")\r\n    const [active, setActiveState] = useState(false)\r\n\r\n    const onHoverEnter = useCallback(() => {    \r\n\r\n        const currentEnter= animateRefEnter.current\r\n        const currentOut = animateRefEnd.current\r\n\r\n        if(currentEnter && currentOut) {\r\n            if(active) {\r\n                setAnim(`moveBack ${animDuration}s forwards`)\r\n                currentOut.beginElement()\r\n            }\r\n            else\r\n            {\r\n                setAnim(`moveLeft ${animDuration}s forwards`)\r\n                currentEnter.beginElement()\r\n            }\r\n            setActiveState(state=>!state)\r\n        }  \r\n    }, [active, setAnim])\r\n\r\n    return (\r\n        <div className={`anim-logo ${className ?? \"\"}`} onMouseEnter={onHoverEnter} ref={buttonRef}>\r\n            <span className=\"anim-logo--container\"  style={anim}>\r\n                <svg\r\n                width=\"86.569\" \r\n                height=\"56.569\" \r\n                viewBox=\"0 0 56.569 56.569\" \r\n                className=\"anim-logo--picture\"\r\n                >\r\n                    <path \r\n                    id=\"Logo-2\" \r\n                    data-name=\"Logo\" \r\n                    d=\" M-1269.909,728H-1286V711.909h10.909V688H-1246V717.09h-23.909V728Zm-5.182-16.091v5.182h5.182v-5.182Z\"\r\n                    transform=\"translate(1424.113 422.85) rotate(45)\" \r\n                    fill=\"#2f3245\">\r\n                        <animate\r\n                        ref={animateRefEnter}\r\n                        dur=\"0.2s\"\r\n                        attributeName=\"d\"\r\n                        values=\"\r\n                        M-1269.909,728H-1286V711.909h10.909V688H-1246V717.09h-23.909V728Zm-5.182-16.091v5.182h5.182v-5.182Z;\r\n                        M-1262.909,735H-1293V704.909h23.909V694H-1252v17.09h-10.909V735Zm-6.182-30.091v6.182h6.182v-6.182Z\r\n                        \"\r\n                        fill=\"freeze\"\r\n                        begin=\"indefinite\"\r\n                        />  \r\n                        <animate\r\n                        ref={animateRefEnd}\r\n                        dur=\"0.2s\"\r\n                        attributeName=\"d\"\r\n                        values=\"\r\n                        M-1262.909,735H-1293V704.909h23.909V694H-1252v17.09h-10.909V735Zm-6.182-30.091v6.182h6.182v-6.182Z;\r\n                        M-1269.909,728H-1286V711.909h10.909V688H-1246V717.09h-23.909V728Zm-5.182-16.091v5.182h5.182v-5.182Z\r\n                        \"\r\n                        begin=\"indefinite\"\r\n                        fill=\"freeze\"\r\n                        />  \r\n                    </path>        \r\n                </svg>  \r\n                <CSSTransition \r\n                nodeRef={textRef}\r\n                in={active} \r\n                timeout={animDuration * 4000} \r\n                unmountOnExit\r\n                className=\"anim-logo-transition\" \r\n                classNames=\"anim-logo-transition\">\r\n                    <span className=\"anim-logo--text\" ref={textRef}>{value}</span> \r\n                </CSSTransition>\r\n                \r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AnimLogo = React.memo(AnimLogoComponent)\r\n\r\nexport default AnimLogo","import { useState } from \"react\";\r\n\r\nexport function useAnim (anim = \"\") :[{animation : string}, (anim : string)=>void] {\r\n\r\n    const [animState, setAnimState] = useState<{animation : string}>({animation :anim})\r\n\r\n    const updateAnim = (newAnim : string) => {\r\n        setAnimState({animation : newAnim})\r\n    }\r\n\r\n    return [\r\n        animState,\r\n        updateAnim\r\n    ]\r\n}","import React, { ReactChild, useRef, useEffect, useState } from 'react';\r\nimport \"./circle-button.css\"\r\n\r\ninterface IECircleButtonProps {\r\n    children : ReactChild, \r\n    className? : string, \r\n    width : string // unit %,\r\n    onClick? : ()=>void\r\n}\r\n\r\nexport default  function CircleButton ({children, className, width, onClick} : IECircleButtonProps) {\r\n\r\n    const buttonRef = useRef<HTMLDivElement>(null)\r\n    const [height, setHeight] = useState(0)\r\n\r\n    function adjustHeight () {\r\n        const button = buttonRef.current\r\n\r\n        if (button) {\r\n            const buttonWidth = button.getBoundingClientRect().width\r\n            setHeight(buttonWidth)\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        adjustHeight()\r\n    }, [width])\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"resize\", adjustHeight)\r\n        \r\n        return ()=>window.removeEventListener(\"resize\", adjustHeight)\r\n    }, [buttonRef])\r\n\r\n    return (\r\n        <div className={`circle-button ${className ?? \"\"}`} ref={buttonRef} style={{width : width, height : height + \"px\"}}>\r\n            <button className=\"circle-button--child\" onClick={onClick} data-testid=\"circle-button\">\r\n                <span className=\"circle-button--border\"></span>\r\n                {children}\r\n            </button>        \r\n        </div>\r\n    )\r\n} ","import React, { CSSProperties, useEffect, useMemo, useState } from 'react';\r\nimport CircleButton from '../circle-button/circle-button';\r\nimport \"./evolution-bar.css\"\r\n\r\ninterface IEEvolutionBar {\r\n    evolution : number //number between 0 and 1,\r\n    back? : ()=>void,\r\n    next? : ()=>void\r\n}\r\n\r\nexport default function EvolutionBar ({evolution, back, next} : IEEvolutionBar) {\r\n\r\n    const [transformStyle, setTransformStyle] = useState<CSSProperties>({transform : \"scale(0)\"})\r\n\r\n    const buttonWidth = useMemo(()=> {\r\n        const screenWidth = window.innerWidth\r\n        if(screenWidth <= 650) return 25 \r\n        else return 15\r\n\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        if(evolution > 1 || evolution < 0) throw new Error(\"evolution prop must be between 0 and 1\")\r\n        setTransformStyle({transform : \"scaleX(\" + evolution + \")\"})\r\n    }, [evolution])\r\n\r\n    return (\r\n        <nav className=\"evolution-bar\">\r\n            <CircleButton className=\"evolution-bar--button\" width={buttonWidth+\"%\"} onClick={back}>PREV</CircleButton>\r\n            <div className=\"evolution-bar--container-bar\">\r\n                <span className=\"evolution-bar--bar\" style={transformStyle} data-testid=\"evolution-bar--bar\"></span>\r\n            </div>\r\n            <CircleButton className=\"evolution-bar--button\" width={buttonWidth+\"%\"}  onClick={next}>NEXT</CircleButton>\r\n        </nav>\r\n    )\r\n}","import React, { CSSProperties } from \"react\"\r\nimport \"./burger-button.css\"\r\n\r\ninterface IEBurgerButtonProps {\r\n    onCLick? : ()=>void, \r\n    style? : CSSProperties, \r\n    active : boolean\r\n}\r\n\r\nexport default function BurgerButton ({onCLick, style, active} : IEBurgerButtonProps) {\r\n\r\n    return (\r\n        <button \r\n        onClick={onCLick} \r\n        style={style}  \r\n        className={`burger-button ${active ? \"burger-button_cross\" : \"\"}`}\r\n        data-testid=\"burger-button\"\r\n        ></button>\r\n    )\r\n}","import * as React from 'react';\r\nimport \"./nav-button.css\"\r\n\r\nexport default function NavButton ({value, onCLick} : {value : string, onCLick ? : ()=>void}) {\r\n    \r\n    return (\r\n        <button className=\"nav-button\" onClick={onCLick}>\r\n            {value}\r\n        </button>\r\n    )\r\n}","import React, { useCallback, useRef, useState } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport BurgerButton from '../burger-button/burger-button';\r\nimport NavButton from '../nav-button/nav-button';\r\nimport \"./nav-bar.css\"\r\n\r\nexport default function NavBar () {\r\n\r\n    const buttonValues = [\"Home\", \"Review\",\"Approach\"]\r\n    const [values, setValues] = useState<Array<string>>([])\r\n    const buttonRefArray = [\r\n        useRef<HTMLDivElement>(null),\r\n        useRef<HTMLDivElement>(null),\r\n        useRef<HTMLDivElement>(null)\r\n    ]\r\n\r\n    const toggleNav = useCallback(()=>{\r\n        setValues(state => state.length === 0   ? buttonValues : [])\r\n    }, [setValues, buttonValues])\r\n\r\n    return (\r\n        <nav className=\"nav-bar\">\r\n            <TransitionGroup className=\"nav-bar--container-items\">\r\n                {\r\n                    values.map((item, index) => (\r\n                        <CSSTransition \r\n                        key={index} \r\n                        timeout={1500} \r\n                        nodeRef={buttonRefArray[index]} \r\n                        unmountOnExit \r\n                        classNames=\"nav-bar--nav-button\"\r\n                        >\r\n                            <div ref={buttonRefArray[index]}>\r\n                                <NavButton value={buttonValues[index].toUpperCase()} />\r\n                            </div>                       \r\n                        </CSSTransition>  \r\n                    ))\r\n                }                                       \r\n            </TransitionGroup>  \r\n            <div className=\"nav-bar--container-burger\">\r\n                 <BurgerButton onCLick={toggleNav} active={values.length > 0}/>\r\n            </div>\r\n           \r\n        </nav>\r\n    )\r\n}","import React, { useMemo, useState } from 'react';\r\nimport DynamicView from './components/dynamic-view/dynamic-view';\r\nimport \"./app.css\"\r\nimport AnimLogo from './components/anim-logo/anim-logo';\r\nimport EvolutionBar from './components/evolution-bar/evolution-bar';\r\nimport NavBar from './components/nav-bar/nav-bar';\r\n\r\nimport pages from \"./data/pages.json\"\r\n\r\n\r\nfunction App() {\r\n\r\n  const [currentIndexView, setCurrentIndexView] = useState<number>(0)\r\n  const maxPages = useMemo(()=>pages.length - 1, [])\r\n\r\n  function displayView () {\r\n    return(\r\n      pages.map((page,index)=> (\r\n          <DynamicView \r\n            key={index}\r\n            className=\"app--dynamic-view\"\r\n            title={page.title}\r\n            description={page.description}\r\n            img={require(\"./assets/img/\" + page.imgName)}\r\n            color={page.color}\r\n            visible={index === currentIndexView}\r\n            />\r\n    ))\r\n      \r\n    )\r\n  }\r\n\r\n  const nextPage =  () => {\r\n    setCurrentIndexView(index => index === maxPages  ? 0 : index + 1)\r\n  }\r\n\r\n  const backPage =  () => {\r\n    setCurrentIndexView(index => index === 0 ? maxPages  : index - 1)\r\n  }\r\n\r\n  return (\r\n    <main className=\"app\">\r\n      <div className=\"app--left-part\">\r\n          <AnimLogo value=\"KITTEN\" className=\"app--logo\"/>\r\n          {\r\n            displayView()\r\n          }\r\n      </div>\r\n      <div className=\"app--right-part\">\r\n        <div className=\"app--container-nav\">\r\n            <NavBar/> \r\n        </div>  \r\n        <div className=\"app--evolution-bar-container\">\r\n            <EvolutionBar evolution={currentIndexView / maxPages} next={nextPage} back={backPage}/>    \r\n        </div> \r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}